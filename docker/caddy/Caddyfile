# TaskFlow Application Caddyfile
# Caddy v2 configuration for reverse proxy and SSL

# Global settings
{
    # Enable admin API for dynamic configuration
    admin off
    
    # Global logging
    log {
        output file /var/log/caddy/access.log
        format json
    }
    
    # Global security headers
    servers {
        protocols h1 h2
        strict_sni_host insecure_off
    }
}

# Main application domain
localhost {
    # Enable automatic HTTPS (self-signed for localhost)
    tls internal
    
    # Security headers
    header {
        # Security headers
        X-Content-Type-Options nosniff
        X-Frame-Options DENY
        X-XSS-Protection "1; mode=block"
        Referrer-Policy strict-origin-when-cross-origin
        Permissions-Policy "geolocation=(), microphone=(), camera=()"
        
        # Remove server information
        -Server
        -X-Powered-By
        
        # CORS headers for API
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
    }
    
    # Rate limiting
    rate_limit {
        zone api
        rate 100r/10s
        burst 200
    }
    
    # Frontend React App (default route)
    handle /* {
        reverse_proxy frontend:3000 {
            health_uri /health
            health_interval 30s
            health_timeout 10s
            health_status 200
        }
        
        # Cache static assets
        @static {
            path *.js *.css *.png *.jpg *.jpeg *.gif *.ico *.svg *.woff *.woff2 *.ttf *.eot
        }
        header @static Cache-Control "public, max-age=31536000, immutable"
    }
    
    # Backend API routes
    handle /api/* {
        reverse_proxy backend:5000 {
            health_uri /api/health
            health_interval 30s
            health_timeout 10s
            health_status 200
        }
        
        # Rate limiting for API
        rate_limit {
            zone api
            rate 100r/10s
            burst 200
        }
        
        # CORS preflight
        @cors {
            method OPTIONS
        }
        respond @cors 200 {
            header Access-Control-Allow-Origin "*"
            header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
            header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
        }
    }
    
    # WebSocket connections
    handle /ws/* {
        reverse_proxy backend:5000 {
            header_up Connection "upgrade"
            header_up Upgrade "websocket"
            header_up Sec-WebSocket-Key "{http.request.header.Sec-WebSocket-Key}"
            header_up Sec-WebSocket-Version "{http.request.header.Sec-WebSocket-Version}"
        }
    }
    
    # Health check endpoint
    handle /health {
        respond "OK" 200
    }
    
    # Error pages
    handle_errors {
        respond "Internal Server Error" 500
    }
    
    # Logging
    log {
        output file /var/log/caddy/error.log
        level ERROR
    }
}

# Production domain configuration (uncomment and modify for production)
# yourdomain.com {
#     # Enable automatic HTTPS with Let's Encrypt
#     tls your-email@example.com
#     
#     # Same configuration as localhost above
#     # ... (copy the entire localhost block content here)
# }
